<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on log myself</title>
    <link>/tags/golang/</link>
    <description>Recent content in golang on log myself</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Copyright © 2008–2019, Steve Francia and the lee.so; all rights reserved.</copyright>
    <lastBuildDate>Fri, 10 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang UT enhance</title>
      <link>/posts/golang-unit-test/</link>
      <pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/golang-unit-test/</guid>
      <description>&lt;p&gt;The unit test code may fail when it&amp;rsquo;s calling a remote service, then we can&amp;rsquo;t write a test function to cover it. there are some ways we can use to avoid the failing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>怎么开发云原生应用？</title>
      <link>/posts/kubernetes-programming/</link>
      <pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/kubernetes-programming/</guid>
      <description>&lt;p&gt;如果你想让你的应用充分利用kubernetes提供的能力，本文将提供一些思路和代码示例。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>grpc</title>
      <link>/posts/grpc/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/grpc/</guid>
      <description>&lt;p&gt;本文简单介绍grpc的作用和原理，然后介绍一些实用的功能，帮你构建一个安全高效的grpc服务。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang programming tips</title>
      <link>/posts/go-program/</link>
      <pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/go-program/</guid>
      <description>&lt;p&gt;本文将整理总结构建go程序时的技巧和需要注意的点，持续更新&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何写出充分利用cpu缓存的代码？</title>
      <link>/posts/cpu-cache/</link>
      <pubDate>Fri, 22 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/cpu-cache/</guid>
      <description>&lt;p&gt;现代cpu通常有l1、l2、l3级别的缓存。这些设备使用了SRAM这种存储技术，相比主存使用的DRAM，SRAM的读写速度都要快得多。所以把主存的数据缓存到cpu-cache中，
让cpu尽量的去读写cpu-cache去完成整个程序，会大幅度提升执行效率。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何避免数据对齐造成的内存浪费？</title>
      <link>/posts/alignment-data/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/alignment-data/</guid>
      <description>&lt;p&gt;许多计算机系统对基本数据类型的合法地址做出了一些限制，要求某种类型对象的地址必须是某个值的K(通常是2、4、8)的倍数。这种对齐限制简化了形成处理器和内存系统之间接口的硬件设计。
假设处理器总是从内存读取8字节，某数据的地址对齐8的倍数，可以总是一个内存操作就读或写该数据。否则，可能执行两次内存访问，因为对象可能被分放在两个8字节内存块中。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
